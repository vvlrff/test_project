/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 tg.glb --transform --types 
Files: tg.glb [1.82MB] > tg-transformed.glb [291.86KB] (84%)
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Sphere_1: THREE.Mesh
    Sphere_2: THREE.Mesh
    Cylinder033: THREE.Mesh
    Camera_1_PhoneFace_Mat_0: THREE.Mesh
    Plane: THREE.Mesh
  }
  materials: {
    PaletteMaterial002: THREE.MeshStandardMaterial
    PaletteMaterial001: THREE.MeshStandardMaterial
    PaletteMaterial003: THREE.MeshStandardMaterial
    PhoneFace_Mat: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function RobotModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/tg-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[0.797, 2.69, 0]} scale={[0.673, 0.57, 0.491]}>
        <mesh geometry={nodes.Sphere_1.geometry} material={materials.PaletteMaterial002} />
        <mesh geometry={nodes.Sphere_2.geometry} material={materials.PaletteMaterial001} />
      </group>
      <mesh geometry={nodes.Cylinder033.geometry} material={materials.PaletteMaterial003} position={[0.577, 2.826, 0.415]} rotation={[Math.PI / 2, 0, 0]} scale={[0.153, 0.064, 0.153]} />
      <mesh geometry={nodes.Camera_1_PhoneFace_Mat_0.geometry} material={materials.PhoneFace_Mat} position={[-0.652, 3.239, 0.69]} rotation={[1.236, 0, 0]} scale={0.017} />
      <mesh geometry={nodes.Plane.geometry} material={materials['Material.001']} position={[-0.757, 3.047, 0.815]} rotation={[1.241, 0, 0]} scale={0.091} />
    </group>
  )
}

useGLTF.preload('/tg-transformed.glb')
